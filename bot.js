require('dotenv').config({ path: 'D:/KGTUbot/client_secret.env' });
const token = process.env.TELEGRAM_BOT_TOKEN;
const spreadsheetId = process.env.GOOGLE_SHEETS_ID;
const TelegramApi = require('node-telegram-bot-api');
const { google } = require('googleapis');
const sheets = google.sheets('v4');
const fs = require('fs');

const bot = new TelegramApi(token, { polling: true });

const getSheetData = async (groupNumber, sheetName) => {
  const auth = new google.auth.GoogleAuth({
    
    scopes: ['https://www.googleapis.com/auth/spreadsheets.readonly']
  });

  const range = `${sheetName}!A1:Q157`;

  try {
    const authClient = await auth.getClient();
    const response = await sheets.spreadsheets.values.get({
      auth: authClient,
      spreadsheetId,
      range,
    });

    const values = response.data.values;
    if (values.length) {
      const header = values[0];
      const groupIndex = header.indexOf(groupNumber);
      if (groupIndex === -1) {
        return null;
      }
      const schedule = values.slice(1)
        .map(row => row[groupIndex] || '')
        .filter(cell => cell.trim() !== '');
      return schedule;
    } else {
      return null;
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ Google Sheets:', error);
    return null;
  }
};

const again = async () => {
  return {
    reply_markup: JSON.stringify({
      inline_keyboard: [
        [{ text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è', callback_data: '/today' }],
        [{ text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –∑–∞–≤—Ç—Ä–∞', callback_data: '/tomorrow' }],
        [{ text: '–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é', callback_data: '/week' }]
      ]
    })
  };
};

const start = async () => {
  bot.setMyCommands([
    { command: '/start', description: '–Ω–∞—á–∞–ª—å–Ω–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ' },
    { command: '/change_group', description: '–°–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã' }
  ]);

  let waitingForGroupNumber = false;
  let userStates = {}; // –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

  const groups = JSON.parse(fs.readFileSync('groups.json', 'utf8')).groups;

  const normalizeGroupNumber = (input) => {
    return input.replace(/\s+/g, '').replace(/-/g, '').toUpperCase();
  };

  bot.on('message', async msg => {
    const text = msg.text;
    const chatID = msg.chat.id;

    if (text === '/start') {
      if (!userStates[chatID] || !userStates[chatID].groupNumber) {
        waitingForGroupNumber = true;
        await bot.sendMessage(chatID, `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ ${msg.from.first_name}, –≤–∞—Å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ö–ì–¢–£–±–æ—Ç, –∑–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–º–æ—Ç—Ä–µ—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≤–∞—à–µ–π –≥—Ä—É–ø–ø—ã. –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Å–≤–æ–µ–π –≥—Ä—É–ø–ø—ã –∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é, —á—Ç–æ–±—ã –∏–∑–º–µ–Ω–∏—Ç—å –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã`);
      } else {
        const replyMarkup = await again();
        await bot.sendMessage(chatID, '–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –Ω–∞–π–¥–µ–Ω, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', replyMarkup);
      }
    } else if (text === '/change_group') {
      waitingForGroupNumber = true;
      await bot.sendMessage(chatID, '–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã');
    } else if (waitingForGroupNumber) {
      const normalizedInput = normalizeGroupNumber(text);
      const group = groups.find(g => normalizeGroupNumber(g) === normalizedInput);
      if (group) {
        userStates[chatID] = { groupNumber: group }; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã
        const replyMarkup = await again();
        await bot.sendMessage(chatID, '–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω, —á—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?', replyMarkup);
      } else {
        await bot.sendMessage(chatID, '–¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã.');
      }
      waitingForGroupNumber = true;
    } else {
      await bot.sendMessage(chatID, '–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω–∏–º–∞—é, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –º–µ–Ω—é)');
    }
  });

  bot.on('callback_query', async msg => {
    const data = msg.data;
    const chatID = msg.message.chat.id;
    const callbackQueryId = msg.id;

    let sheetName;
    if (data === '/today') {
      sheetName = 'CurrentSchedule';
    } else if (data === '/tomorrow') {
      sheetName = 'TomorrowSchedule';
    } else if (data === '/week') {
      sheetName = 'CurrentWeek';
    } else {
      await bot.answerCallbackQuery(callbackQueryId, { text: '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞' });
      return;
    }

    const userState = userStates[chatID];
    if (userState && userState.groupNumber) {
      const schedule = await getSheetData(userState.groupNumber, sheetName);
      const replyMarkup = await again();
      if (schedule) {
        const formattedSchedule = data === '/week' ? formatWeekSchedule(schedule) : formatSchedule(schedule);
        await bot.sendMessage(chatID, `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${userState.groupNumber} –Ω–∞ ${data === '/week' ? '—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' : sheetName === 'TomorrowSchedule' ? '–∑–∞–≤—Ç—Ä–∞' : '—Å–µ–≥–æ–¥–Ω—è'}:\n${formattedSchedule}`, { parse_mode: 'Markdown', ...replyMarkup });
      } else {
        await bot.sendMessage(chatID, `–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã ${userState.groupNumber} –Ω–∞ ${data === '/week' ? '—Ç–µ–∫—É—â—É—é –Ω–µ–¥–µ–ª—é' : sheetName === 'TomorrowSchedule' ? '–∑–∞–≤—Ç—Ä–∞' : '—Å–µ–≥–æ–¥–Ω—è'} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ`, replyMarkup);
      }
    } else {
      await bot.sendMessage(chatID, '–ù–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã —Å–Ω–æ–≤–∞.');
      waitingForGroupNumber = true;
    }

    try {
      await bot.answerCallbackQuery(callbackQueryId);
    } catch (error) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ –Ω–∞ callback query:', error);
    }
  });
};

const formatSchedule = (schedule) => {
  return schedule
    .map((cell, index) => {
      return (index > 0 && (index + 1) % 5 === 0) ? `*${cell.replace(/_/g, '\\_').replace(/\*/g, '\\*')}*\n` : `*${cell.replace(/_/g, '\\_').replace(/\*/g, '\\*')}*`;
    })
    .join('\n');
};

const formatWeekSchedule = (schedule) => {
  const daysOfWeek = ['üìÖ–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'üìÖ–í—Ç–æ—Ä–Ω–∏–∫', 'üìÖ–°—Ä–µ–¥–∞', 'üìÖ–ß–µ—Ç–≤–µ—Ä–≥', 'üìÖ–ü—è—Ç–Ω–∏—Ü–∞', 'üìÖ–°—É–±–±–æ—Ç–∞', 'üìÖ–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'];
  let formattedSchedule = '';
  let isNewDay = true;

  schedule.forEach((cell) => {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π —ç–ª–µ–º–µ–Ω—Ç –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
    if (daysOfWeek.includes(cell)) {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–æ–¥ –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏, –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å
      if (!isNewDay) {
        formattedSchedule += '\n';
      }
      formattedSchedule += `\n*${cell.replace(/_/g, '\\_').replace(/\*/g, '\\*')}*`;
      isNewDay = true;
    } else {
      // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞–¥ —Å—Ç—Ä–æ–∫–æ–π —Å —ç–º–æ–¥–∑–∏ –ø–µ—Å–æ—á–Ω—ã—Ö —á–∞—Å–æ–≤
      if (cell.includes('‚è≥')) {
        formattedSchedule += '\n';
      }
      formattedSchedule += `\n*${cell.replace(/_/g, '\\_').replace(/\*/g, '\\*')}*`;
      isNewDay = false;
    }
  });

  // –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –≤ –∫–æ–Ω—Ü–µ, –µ—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —ç–ª–µ–º–µ–Ω—Ç –±—ã–ª –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏
  if (isNewDay) {
    formattedSchedule += '\n';
  }

  return formattedSchedule;
};

start();